#!/bin/bash
set -e

PARALLEL='./parallel -s bash 4'  # run in parallel on jenkins
#PARALLEL=bash # if you don't have the parallel program

die() { echo "ERROR: $@" >&2; exit 1
}

PATH="$PATH:`pwd`/scripts"
export PATH

TMPDIR=/tmp/regression-test$$
trap "/bin/rm -rf $TMPDIR" 0 1 2 3 15
mkdir $TMPDIR

OutputFile="regression-test.result"
ErrorMargin="0.04"
#echo "WARNING: temporarily set error margin way too big while core scores are being tested"
OutputDir="regression-out"
CompareFile=""

while getopts "b:e:o:c:" opt; do
    case $opt in
    e)
        if [[ $OPTARG =~ "^[0.9]*.[0.9]\+$" ]]; then
            ErrorMargin=$OPTARG
        else
            echo "Argument for provided option -e is not a decimal number between 0-1" >&2
            exit 1
        fi
        ;;
    o)
        OutputFile=$OPTARG
        ;;
    c)
        CompareFile=$OPTARG
        ;;
    \?) 
        echo "Invalid option: -$OPTARG" >&2
        exit 1
        ;;
    :)
        echo "Option -$OPTARG requires an argument" >&2
        exit 1
        ;;
    esac
done

if [ -z $CompareFile ] && [ ! -f $CompareFile ]; then
    printf "Regression file specified: %s does not exists\n" "$CompareFile"
    exit 1
fi

if [ ! -d "$OutputDir" ]; then
    mkdir $OutputDir
fi

if [ -f $OutpuFile ]; then
    > "$OutputFile"
fi

Networks_nodes=""
for network in AThaliana CElegans DMelanogaster HSapiens MMusculus RNorvegicus SCerevisiae SPombe; do
    Networks_nodes=$Networks_nodes${network}" ""`head ./networks/${network}/${network}.gw | sed -n 5p`""\n"
done
# sort them largest first (sort -nr) since we're going to run them in parallel start the slowest ones first.
Biogrid_network=`echo -e $Networks_nodes | sort -k2 -nr | awk '{print $1}'`
Networks_count=`echo $Biogrid_network | wc -w`

[ -x ./sana ] || die "can't find ./sana executable"

for i in $(seq 1 $Networks_count);do
    for j in $(seq $((i + 1)) $Networks_count); do
        Network2=`echo -e $Biogrid_network | awk '{print $'$i'}'`
        Network1=`echo -e $Biogrid_network | awk '{print $'$j'}'`
        echo "echo Running $Network1-$Network2; ./sana -t 5 -s3 1 -g1 $Network1 -g2 $Network2 -o '$OutputDir/$Network1-$Network2' &> '$OutputDir/$Network1-$Network2.progress'"
    done
done | eval $PARALLEL

Iterations=""
echo "Checking Iterations Speed" >> $OutputFile
printf "%-30s | %-20s\n" "Networks Pair" "Iterations Speed" >> $OutputFile
for i in $(seq 1 $Networks_count);do
    for j in $(seq $((i + 1)) $Networks_count); do
        Network2=`echo -e $Biogrid_network | awk '{print $'$i'}'`
        Network1=`echo -e $Biogrid_network | awk '{print $'$j'}'`
        progress="$OutputDir/$Network1-$Network2.progress"
        cIt=`grep -o "[0-9]*.[0-9]* iterations per second" ./$progress | awk '{print $1}' | sort -u`
        Iterations="$Iterations $cIt"
        printf "%-30s | %-20s\n" "$Network1-$Network2" "$cIt" >> $OutputFile

    done
done

IterationsAvg=`echo $Iterations | tr " " "\n" | awk '{s+=$1}END{print s/NR}'`
IterationsAvg=`printf "%f" $IterationsAvg`
printf "Iterations /s Average: %s \n" "$IterationsAvg" >> $OutputFile

PrintTestScores()
{
    Scores=""
    printf "Checking %s score\n" $1 >> $OutputFile
    printf "%-30s | %-20s\n" "Networks Pair" "$1 score" >> $OutputFile
    for i in $(seq 1 $Networks_count);do
        for j in $(seq $((i + 1)) $Networks_count); do
            Network2=`echo -e $Biogrid_network | awk '{print $'$i'}'`
            Network1=`echo -e $Biogrid_network | awk '{print $'$j'}'`
            progress="$OutputDir/$Network1-$Network2.out"
            Score=`grep -o "^$1: 0.[0-9]\+$" ./$progress | awk '{print $2}' | sort -u`
            Scores=$Scores" "$Score
            printf "%-30s | %-20s\n" "$Network1-$Network2" "$Score" >> $OutputFile
        done
    done

    ScoresAvg=`echo $Scores | tr " " "\n" | awk '{s+=$1}END{print s/NR}'`
    ScoresAvg=`printf "%f" $ScoresAvg`
    printf "$1 Score Average: %s\n" "$ScoresAvg" >> $OutputFile
}

SCORES="ec ics s3 lccs sec"
for score in `echo $SCORES | tr ' ' '\n' `; do
    PrintTestScores $score
done

if [ ! -z "$CompareFile" ]; then
    BaseAverages=`cat $CompareFile | grep "Average" | grep -o "[0-9]\+.[0-9]\+"`
    Names=`cat $CompareFile | grep "Average" | awk '{print $1}'`
    NewAverages=`cat $OutputFile | grep "Average" | grep -o "[0-9]\+.[0-9]\+"`
    for i in $(seq `echo $BaseAverages | wc -w`);do
        baseItem=`echo -e $BaseAverages | awk '{print $'$i'}'`
        newItem=`echo -e $NewAverages | awk '{print $'$i'}'`
        name=`echo -e $Names | awk '{print $'$i'}'`
        errorDif=`parse "($newItem - $baseItem)/$baseItem"`
	EXTRA_MARGIN=1
	echo -n "$name: ($newItem - $baseItem)/$baseItem, changeFrac: $errorDif, margin $ErrorMargin" >&2
	case $name in
	Iterations)
	    EXTRA_MARGIN=2.5
	    echo -n " * $EXTRA_MARGIN (wider margin)" >&2
	    ;;
	esac
	echo "" # finish the "echo -n" line above
	errorDif=`parse "$errorDif/$EXTRA_MARGIN"`
        errorDif=`parse "ABS($errorDif)" | awk '{printf "%.16f\n",$1}'`
        if [[ `echo "$errorDif < $ErrorMargin" | bc -l` -eq 0 ]]; then
            touch $TMPDIR/failed
	    echo "$name failed error margin: ($newItem - $baseItem)/$baseItem has error difference '$errorDif < $ErrorMargin'" >&2
        fi
    done

    echo "Checking SANA Locking Mechanism" | tee -a $OutputFile
    # First create the shuffled list so we can run them in parallel in the next loop.
    touch $TMPDIR/networks.locking
    for i in `seq 8`; do
        random=`shuf -i "1-$Networks_count" -n 2 | sort -n`
        select=`echo $random | tr "\n" " " | awk '{print $1}'`
        select2=`echo $random | tr "\n" " " | awk '{print $2}'`
        Network2=`echo -e $Biogrid_network | awk '{print $'$select'}'`
        Network1=`echo -e $Biogrid_network | awk '{print $'$select2'}'`
        if [ -n "$Network1" -a -n "$Network2" ]; then
	    paste <(cat ./networks/$Network1/${Network1}.gw | grep "|{[0-9]\+}|" | grep -o "[0-9]\+" | shuf -n 50) <(cat ./networks/$Network2/${Network2}.gw | grep "|{[0-9]\+}|" | grep -o "[0-9]\+" | shuf -n 50) > $OutputDir/$Network1-$Network2.locking
	    echo "$Network1" "$Network2" >> $TMPDIR/networks.locking
        else
            echo "WARNING (temporary hack): one of the following is empty: Network1 = '$Network1', Network2 = '$Network2'" >&2
        fi
    done
    cat $TMPDIR/networks.locking | while read Network1 Network2; do
	echo "echo checking locking between $Network1 and $Network2; ./sana -t 5 -s3 1 -g1 $Network1 -g2 $Network2 -lock $OutputDir/$Network1-$Network2.locking -o $OutputDir/$Network1-$Network2-locking-test &> /dev/null"
    done | eval $PARALLEL
    cat $TMPDIR/networks.locking | while read Network1 Network2; do
	if [[ `grep -f "$OutputDir/$Network1-$Network2.locking" "$OutputDir/$Network1-$Network2-locking-test.align" | wc -l` -ne 50 ]]; then
	    touch $TMPDIR/failed
	    echo "Locking mechanism regression testing failed on $Network1 and $Network2 on $OutputDir/$Network1-$Network2.locking file" >&2
	fi
    done

    if [ -f $TMPDIR/failed ] ;then
        exit 1
    else
        exit 0
    fi
fi
